*Note* : This document is totally unofficial. You should *not* rely on anything on this document is you *need* an exact information.
Google Reader API has not officially been released. This document has been made mainly by reverse engeneering the protocol.

=Requierements=

Google Reader API require :
  * http client
  * GET and POST support
  * Cookie support
  * https client

https is only required for identification with Google to get the string called *SID*. You can rely on an external tool to connect with https and give you SID. If you do, https won't be required.

Cookie support is only required to pass to all pages the current *SID*, proof of identification. If are able to change add lines in headers, cookie support is not required anymore.

Google Reader API may require :
  * http client
  * GET and POST support
  * external tool to get *SID* (using https)
  * putting *SID* into header

=Glossary=

  * *SID* : Session ID. SID is generated each time you login to Google (any service). The SID is valid until you logout.
  * *user ID* : a 20 digits string used by google reader to identify a user. You don't really need to know it. You can always do things a way that user ID is not needed. Usually, when you need that information, just replace it by *-* and the user ID for current logged user will be used. The user ID never change for a user.
  * *token* : A token is a special string that is used like a session identification, but that expire rather quickly. You usaully need a token for direct api calls that change informations. The token is valid for few minutes/hours. If API call fail (doesn't return OK), you just have to get antoher token.
  * *client ID* : A string that identify the client used. I suppose it's for logging/stat purpose, or perhaps to make some adjustement for some clients, but I doubt so. old GoogleReader interface use `'lens'`, new one use `'scroll'`. The writer of this document use `'contact:`_name_`-at-`_host_`'` for interactive test, and use string like `'pyrfeed/0.5.0'` for the software _pyrfeed_ in version _0.5.0_ (like classical identification strings for unix softwares).
  * *item*/*entry* : Sometimes called _item_, sometimes called _entry_, the item is the base element of a feed. An item usally contain a text, a title and a link, but can contain other properties. An RSS/Atom aggregator aggregates items. (Note: _item_ is the RSS term, while _entry_ is the Atom term).

=Identification=

*Note* : According to Mihai Parparita in Google Reader Support Group ( http://groups.google.com/group/Google-Labs-Reader/browse_frm/thread/73a0aed708bcd005 ), "Authentication is one of the reason why the API hasn't been released yet". You should expect big changes before Google Reader release official API.

To login, you need to post with https on https://www.google.com/accounts/ClientLogin with the following POST parameters :

|| *POST parameter name* || *Post parameter value* ||
|| service || `'reader'` ||
|| Email || _your login_ ||
|| Passwd || _your password_ ||
|| source || _your client string identification_ ||
|| continue || `'http://www.google.com/'` ||

  Of course, _your login_ and _your password_ are login and password you usually use to identify interactively to Google.

  There is no official rule _your client string identification_, see *client ID* in glossary for more informations.

The POST action will return you a text file, containing lines of the form :

  _key_=_value_

You need to extract the _value_ for the _key_ named `SID`

You then have to add yourself a cookie (well, it look like Google doesn't add it itself) with the following properties :
|| name || `SID` ||
|| domain || `.google.com` ||
|| path || `/` ||
|| expires || `1600000000` ||

If you don't have a http client API that support cookies, you can just add header lines that simulate this cookie in all other requests. This should be the only thing for which cookies are really needed.

=Url scheme=

Except for identification process, all Google Reader url ressources start with `http://www.google.com/reader/`. We'll explain here direct subspaces of thoses urls.

|| *URL prefix* || *will be refered as, in  this document* || *comment* ||
|| `http://www.google.com/reader/atom/` || _/atom/_ || All urls starting by this prefix return atom feeds. It's the (only?) way to acces to feed contents. ||
|| `http://www.google.com/reader/api/0/` || _/api/0/_ || This is the main API entry point. It's used for items/feeds modifications, like adding a _Star_, deleting a tag, etc. For those modification services, it return either `"OK"` or `""`. It's also used to consult some setting lists like list of feeds, list of tags, list of unread counts by feeds/tags, etc. For those read services, it returns an _"object"_ that can be either _[http://json.org/ json]_ or _xml that look like json_. ||
|| `http://www.google.com/reader/view/` || _/view/_ || All AJAX interface is done by /view/ urls. AJAX code use _/atom/_ and _/api/0/_ as sublayers to do the job. ||
|| `http://www.google.com/reader/shared/` || _/shared/_ || All shared pages use this prefix. You obviously don't need authentification to use those pages. ||
|| `http://www.google.com/reader/settings/` || _/settings/_ || The AJAX application to configure all settings. Mainly manipulate informations from _/api/0/_. ||

==Feeds==

_TODO: Text need to be written_

==Api==

_TODO: Text need to be written_

==Viewer==

_TODO: Text need to be written_

==Misc==

_TODO: Text need to be written_
